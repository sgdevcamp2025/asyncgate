# msa actions

name: "ECR Build & Push Action"
description: "Builds a Docker image and pushes it to Amazon ECR"

# be-main.yml에게 값을 받아와 사용 (with)
inputs:
  namespace:
    description: "ECR namespace (msa or service)"
    required: true
  folder:
    description: "Path to the project folder"
    required: true
  ecr_repo:
    description: "ECR repository name"
    required: true
  aws_access_key_id:
    description: "AWS Access Key ID"
    required: true
  aws_secret_access_key:
    description: "AWS Secret Access Key"
    required: true
  aws_region:
    description: "AWS ECR region"
    required: true
  ecr_uri:
    description: "AWS ECR uri"
    required: true
  ec2_ip:
    description: "AWS EC2 public ip"
    required: true
  ec2_username:
    description: "AWS EC2 usename"
    required: true
  ec2_ssh_key:
    description: "AWS EC2 ssh key"
    required: true
  container_name:
    description: "AWS EC2 container name"
    required: true
  container_port:
    description: "AWS EC2 container port"
    required: true


runs:
  using: "composite"
  steps:
    # 리포지토리 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3

    # AWS 인증 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ap-northeast-2

    # Amazon ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Docker 빌드 및 ECR에 푸시
    - name: Build and push Docker image to Amazon ECR
      shell: bash
      # github commit hash를 이미지 태그로
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG=${{ github.sha }}
        FULL_ECR_PATH=${{ steps.login-ecr.outputs.registry }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}

        echo "Moving to project folder: ${{ inputs.folder }}"
        cd ${{ inputs.folder }}

        echo "Building Docker image..."
        docker build -t $FULL_ECR_PATH:$IMAGE_TAG .

        echo "Pushing image to Amazon ECR..."
        docker push $FULL_ECR_PATH:$IMAGE_TAG

        echo "Build & Push completed!"

    - name: EC2에서 ECR에 로그인하기
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          aws ecr get-login-password --region ${{ inputs.aws_region }} | sudo docker login --username AWS --password-stdin ${{ inputs.ecr_uri }}

    - name: 기존 EC2에서 실행중인 컨테이너 종료
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker ps -q | xargs -r docker stop
    
    - name: 기존 EC2에 존재하는 모든 컨테이너 삭제
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker ps -asq | xargs -r docker rm

    - name: 기존 EC2에 저장되어있는 이미지 삭제
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker images -q | xargs -r docker rmi

    - name: EC2에서 도커에서 사용하지 않는 자원 삭제처리
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker system prune -af

    - name: EC2에서 도커 이미지를 가져오기
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker pull ${{ inputs.ecr_uri }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}:${{ github.sha }}

    - name: Debugging container port
      run: echo "Container Port: ${{ secrets.APIGATEWAY_PORT }}"

    - name: ECR에서 불러온 이미지를 도커에서 실행
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker stop ${{ inputs.container_name }} || true
          sudo docker rm ${{ inputs.container_name }} || true

          # 컨테이너 포트 기본값 설정 (8080)
          CONTAINER_PORT=${{ inputs.container_port }}
          if [[ -z "$CONTAINER_PORT" || ! "$CONTAINER_PORT" =~ ^[0-9]+$ ]]; then
            CONTAINER_PORT=8080
          fi

          echo "Using container port: $CONTAINER_PORT"

          sudo docker run -d --name ${{ inputs.container_name }} -p $CONTAINER_PORT:$CONTAINER_PORT ${{ inputs.ecr_uri }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}:${{ github.sha }}

