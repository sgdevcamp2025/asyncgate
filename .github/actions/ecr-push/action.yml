# msa actions

name: "ECR Build & Push Action"
description: "Builds a Docker image and pushes it to Amazon ECR"

# be-main.yml에게 값을 받아와 사용 (with)
inputs:
  namespace:
    description: "ECR namespace (msa or service)"
    required: true
  folder:
    description: "Path to the project folder"
    required: true
  ecr_repo:
    description: "ECR repository name"
    required: true
  aws_access_key_id:
    description: "AWS Access Key ID"
    required: true
  aws_secret_access_key:
    description: "AWS Secret Access Key"
    required: true
  aws_region:
    description: "AWS ECR region"
    required: true
  ecr_uri:
    description: "AWS ECR uri"
    required: true
  ec2_ip:
    description: "AWS EC2 public ip"
    required: true
  ec2_username:
    description: "AWS EC2 usename"
    required: true
  ec2_ssh_key:
    description: "AWS EC2 ssh key"
    required: true
  container_name:
    description: "AWS EC2 container name"
    required: true
  container_port:
    description: "AWS EC2 container port"
    required: true
  config_private_ip:
    description: "Config private ip"
    required: true
  config_port:
    description: "Config default port"
    required: true
  config_application_yml:
    description: "Config application.yml"
    required: true



runs:
  using: "composite"
  steps:
    # 리포지토리 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3

    # AWS 인증 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ap-northeast-2

    # Amazon ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Generate dynamic bootstrap.yml & application.yml
      shell: bash
      run: |
        if [[ "${{ inputs.container_name }}" == "config-server" ]]; then
          # Generate bootstrap.yml for config-server
          echo "encrypt:" > ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "  key: ${{ inputs.config_private_ip }}" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml

          # Generate application.yml
          rm -f ${{ inputs.folder }}/src/main/resources/application.yml
          echo "${{ inputs.config_application_yml }}" | base64 --decode > ${{ inputs.folder }}/src/main/resources/application.yml

        elif [[ "${{ inputs.container_name }}" == "apigateway-server" ]]; then
          # Generate bootstrap.yml for API Gateway
          echo "spring:" > ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "  application:" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "    name: ${{ inputs.container_name }}" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "  cloud:" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "    config:" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "      uri: http://${{ inputs.config_private_ip }}:${{ inputs.config_port }}" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml

        else
          # Generate bootstrap.yml for other services
          echo "spring:" > ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "  application:" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "    name: ${{ inputs.container_name }}" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "  cloud:" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "    config:" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
          echo "      uri: http://${{ inputs.config_private_ip }}:${{ inputs.config_port }}" >> ${{ inputs.folder }}/src/main/resources/bootstrap.yml
        fi


    # Docker 빌드 및 ECR에 푸시
    - name: Build and push Docker image to Amazon ECR
      shell: bash
      # github commit hash를 이미지 태그로
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG=${{ github.sha }}
        FULL_ECR_PATH=${{ steps.login-ecr.outputs.registry }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}

        echo "Moving to project folder: ${{ inputs.folder }}"
        cd ${{ inputs.folder }}

        echo "Building Docker image..."
        docker build -t $FULL_ECR_PATH:$IMAGE_TAG .

        echo "Pushing image to Amazon ECR..."
        docker push $FULL_ECR_PATH:$IMAGE_TAG

        echo "Cleaning up sensitive file..."
        rm -f src/main/resources/bootstrap.yml

        echo "Build & Push completed!"

    - name: EC2에서 ECR에 로그인하기
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          aws ecr get-login-password --region ${{ inputs.aws_region }} | sudo docker login --username AWS --password-stdin ${{ inputs.ecr_uri }}

    - name: 기존 EC2에서 실행중인 컨테이너 종료 및 삭제
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          # docker-compose.yml 파일이 있는 경우만 실행
          if [ -f "docker-compose.yml" ]; then
            cd $COMPOSE_DIR
            sudo docker compose down --rmi all
            sudo docker volume prune -f
            sudo docker network prune -f

            # docker-compose.yml 파일 삭제
            echo "docker-compose.yml 파일 삭제 중..."
            rm -f docker-compose.yml
            echo "docker-compose.yml 파일 삭제 완료."

          else
            echo "No docker-compose.yml found. Skipping docker compose down."
          fi

    - name: Generate docker-compose.yml for EC2 based on namespace
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          if [ "${{ inputs.namespace }}" == "msa" ]; then
            echo "Generating docker-compose.yml for MSA architecture..."
            echo "version: '3.8'" > docker-compose.yml
            echo "" >> docker-compose.yml
            echo "services:" >> docker-compose.yml
            echo "  apigateway-server:" >> docker-compose.yml
            echo "    image: ${{ inputs.ecr_uri }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}:${{ github.sha }}" >> docker-compose.yml
            echo "    container_name: ${{ inputs.container_name }}" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"${{ inputs.container_port }}:${{ inputs.container_port }}\"" >> docker-compose.yml
            echo "    healthcheck:" >> docker-compose.yml
            echo "      test: [\"CMD-SHELL\", \"curl -f http://${{ inputs.container_name }}:${{ inputs.container_port }}/actuator/health || exit 1\"]" >> docker-compose.yml
            echo "      interval: 10s" >> docker-compose.yml
            echo "      timeout: 5s" >> docker-compose.yml
            echo "      retries: 2" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml

          elif [ "${{ inputs.namespace }}" == "service" ]; then
            echo "Generating docker-compose.yml for Service architecture..."
            echo "version: '3.8'" > docker-compose.yml
            echo "" >> docker-compose.yml
            echo "services:" >> docker-compose.yml

            if [ "${{ inputs.container_name }}" == "chat-server" ]; then
              # chat-server 전용 설정 (MongoDB 의존성 및 Healthcheck 추가)
              echo "  chat-server:" >> docker-compose.yml
              echo "    image: ${{ inputs.ecr_uri }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}:${{ github.sha }}" >> docker-compose.yml
              echo "    container_name: chat-server" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"8700:8700\"" >> docker-compose.yml  # 외부 포트 8700 고정
              echo "    depends_on:" >> docker-compose.yml
              echo "      mongo:" >> docker-compose.yml
              echo "        condition: service_healthy" >> docker-compose.yml
              echo "    healthcheck:" >> docker-compose.yml
              echo "      test: [\"CMD-SHELL\", \"curl -f http://chat-server:8700/actuator/health || exit 1\"]" >> docker-compose.yml
              echo "      interval: 10s" >> docker-compose.yml
              echo "      timeout: 5s" >> docker-compose.yml
              echo "      retries: 2" >> docker-compose.yml
              echo "    restart: unless-stopped" >> docker-compose.yml

              # MongoDB
              echo "  mongo:" >> docker-compose.yml
              echo "    image: mongo:latest" >> docker-compose.yml
              echo "    container_name: mongo" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"27017:27017\"" >> docker-compose.yml
              echo "    restart: unless-stopped" >> docker-compose.yml
              echo "    volumes:" >> docker-compose.yml
              echo "      - mongo_data:/data/db" >> docker-compose.yml
              echo "    healthcheck:" >> docker-compose.yml
              echo "      test: [\"CMD-SHELL\", \"mongosh --quiet --eval \\\"db.adminCommand({ ping: 1 })\\\" || exit 1\"]" >> docker-compose.yml
              echo "      interval: 10s" >> docker-compose.yml
              echo "      timeout: 10s" >> docker-compose.yml
              echo "      retries: 5" >> docker-compose.yml
              echo "      start_period: 30s" >> docker-compose.yml


            else
              # 일반 서비스 블록 (chat-server가 아닌 경우)
              echo "  ${{ inputs.container_name }}:" >> docker-compose.yml
              echo "    image: ${{ inputs.ecr_uri }}/${{ inputs.namespace }}/${{ inputs.ecr_repo }}:${{ github.sha }}" >> docker-compose.yml
              echo "    network_mode: host" >> docker-compose.yml
              echo "    container_name: ${{ inputs.container_name }}" >> docker-compose.yml
              echo "    restart: unless-stopped" >> docker-compose.yml
            fi

            # user-server인 경우 redis 추가
            if [ "${{ inputs.container_name }}" == "user-server" ]; then
              echo "  redis:" >> docker-compose.yml
              echo "    image: redis:latest" >> docker-compose.yml
              echo "    container_name: redis" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"6379:6379\"" >> docker-compose.yml
              echo "    restart: unless-stopped" >> docker-compose.yml
            fi

            echo "volumes:" >> docker-compose.yml
            echo "  mongo_data:" >> docker-compose.yml

          else
            echo "Unknown namespace: ${{ inputs.namespace }}"
            exit 1
          fi

    - name: Start container using Docker Compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.ec2_ip }}
        username: ${{ inputs.ec2_username }}
        key: ${{ inputs.ec2_ssh_key }}
        script: |
          sudo docker compose up -d

